{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","numMessage","setNumMessage","token","setToken","directLine","useMemo","createDirectLine","increment","useCallback","shouldHideSendBox","store","createStore","next","action","type","styleOptions","hideSendBox","useEffect","abortController","AbortController","a","fetch","method","signal","res","ok","Error","json","abort","className","Math","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4iBAwDeA,MAjDf,WACE,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAaC,mBAAQ,kBAAMH,GAASI,2BAAiB,CAAEJ,YAAU,CAACA,IAClEK,EAAYC,uBAAY,kBAAMP,GAAc,SAAAD,GAAU,OAAIA,EAAa,OAAI,CAACC,IAC5EQ,EAAoBJ,mBAAQ,kBAAML,GARpB,IAQiD,CAACA,IAEhEU,EAAQL,mBACZ,kBACEM,sBAAY,IAAI,kBAAM,SAAAC,GAAI,OAAI,SAAAC,GAG5B,MAFgB,kCAAhBA,EAAOC,MAA4CP,IAE5CK,EAAKC,UAEhB,CAACN,IAGGQ,EAAeV,mBAAQ,iBAAO,CAAEW,YAAaP,KAAsB,CAACA,IAuB1E,OArBAQ,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAiB5B,OAfA,sBAAC,gCAAAC,EAAA,sEACmBC,MAAM,6DAA8D,CACpFC,OAAQ,OACRC,OAAQL,EAAgBK,SAH3B,WACOC,EADP,QAMUC,GANV,sBAOS,IAAIC,MAAM,0BAPnB,uBAUyBF,EAAIG,OAV7B,gBAUSzB,EAVT,EAUSA,MAERC,EAASD,GAZV,2CAAD,GAeO,kBAAMgB,EAAgBU,WAC5B,CAACzB,IAGF,sBAAK0B,UAAU,MAAf,YACKzB,GAAc,cAAC,IAAD,CAAcA,WAAYA,EAAYM,MAAOA,EAAOK,aAAcA,IACnF,sBAAKc,UAAU,eAAf,sBAAwCC,KAAKC,IAAI,EA9CjC,EA8CoD/B,GAApE,yBCvCSgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e1a10eeb.chunk.js","sourcesContent":["import './App.css';\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactWebChat, { createDirectLine, createStore } from 'botframework-webchat';\n\nconst MESSAGE_QUOTA = 5;\n\nfunction App() {\n  const [numMessage, setNumMessage] = useState(0);\n  const [token, setToken] = useState();\n\n  const directLine = useMemo(() => token && createDirectLine({ token }), [token]);\n  const increment = useCallback(() => setNumMessage(numMessage => numMessage + 1), [setNumMessage]);\n  const shouldHideSendBox = useMemo(() => numMessage >= MESSAGE_QUOTA, [numMessage]);\n\n  const store = useMemo(\n    () =>\n      createStore({}, () => next => action => {\n        action.type === 'DIRECT_LINE/INCOMING_ACTIVITY' && increment();\n\n        return next(action);\n      }),\n    [increment]\n  );\n\n  const styleOptions = useMemo(() => ({ hideSendBox: shouldHideSendBox }), [shouldHideSendBox]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    (async function () {\n      const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', {\n        method: 'POST',\n        signal: abortController.signal\n      });\n\n      if (!res.ok) {\n        throw new Error('Failed to fetch token.');\n      }\n\n      const { token } = await res.json();\n\n      setToken(token);\n    })();\n\n    return () => abortController.abort();\n  }, [setToken]);\n\n  return (\n    <div className=\"app\">\n      {!!directLine && <ReactWebChat directLine={directLine} store={store} styleOptions={styleOptions} />}\n      <div className=\"app__counter\">You have {Math.max(0, MESSAGE_QUOTA - numMessage)} messages left.</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}